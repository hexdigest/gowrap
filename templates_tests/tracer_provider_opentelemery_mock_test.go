package templatestests

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i go.opentelemetry.io/otel/trace.TracerProvider -o ./tracer_provider_opentelemery_mock_test.go -n OpentelemetryTracerProviderMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_trace "go.opentelemetry.io/otel/trace"
)

// OpentelemetryTracerProviderMock implements trace.TracerProvider
type OpentelemetryTracerProviderMock struct {
	t minimock.Tester

	funcTracer          func(instrumentationName string, opts ...mm_trace.TracerOption) (t1 mm_trace.Tracer)
	inspectFuncTracer   func(instrumentationName string, opts ...mm_trace.TracerOption)
	afterTracerCounter  uint64
	beforeTracerCounter uint64
	TracerMock          mOpentelemetryTracerProviderMockTracer
}

// NewOpentelemetryTracerProviderMock returns a mock for trace.TracerProvider
func NewOpentelemetryTracerProviderMock(t minimock.Tester) *OpentelemetryTracerProviderMock {
	m := &OpentelemetryTracerProviderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TracerMock = mOpentelemetryTracerProviderMockTracer{mock: m}
	m.TracerMock.callArgs = []*OpentelemetryTracerProviderMockTracerParams{}

	return m
}

type mOpentelemetryTracerProviderMockTracer struct {
	mock               *OpentelemetryTracerProviderMock
	defaultExpectation *OpentelemetryTracerProviderMockTracerExpectation
	expectations       []*OpentelemetryTracerProviderMockTracerExpectation

	callArgs []*OpentelemetryTracerProviderMockTracerParams
	mutex    sync.RWMutex
}

// OpentelemetryTracerProviderMockTracerExpectation specifies expectation struct of the TracerProvider.Tracer
type OpentelemetryTracerProviderMockTracerExpectation struct {
	mock    *OpentelemetryTracerProviderMock
	params  *OpentelemetryTracerProviderMockTracerParams
	results *OpentelemetryTracerProviderMockTracerResults
	Counter uint64
}

// OpentelemetryTracerProviderMockTracerParams contains parameters of the TracerProvider.Tracer
type OpentelemetryTracerProviderMockTracerParams struct {
	instrumentationName string
	opts                []mm_trace.TracerOption
}

// OpentelemetryTracerProviderMockTracerResults contains results of the TracerProvider.Tracer
type OpentelemetryTracerProviderMockTracerResults struct {
	t1 mm_trace.Tracer
}

// Expect sets up expected params for TracerProvider.Tracer
func (mmTracer *mOpentelemetryTracerProviderMockTracer) Expect(instrumentationName string, opts ...mm_trace.TracerOption) *mOpentelemetryTracerProviderMockTracer {
	if mmTracer.mock.funcTracer != nil {
		mmTracer.mock.t.Fatalf("OpentelemetryTracerProviderMock.Tracer mock is already set by Set")
	}

	if mmTracer.defaultExpectation == nil {
		mmTracer.defaultExpectation = &OpentelemetryTracerProviderMockTracerExpectation{}
	}

	mmTracer.defaultExpectation.params = &OpentelemetryTracerProviderMockTracerParams{instrumentationName, opts}
	for _, e := range mmTracer.expectations {
		if minimock.Equal(e.params, mmTracer.defaultExpectation.params) {
			mmTracer.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTracer.defaultExpectation.params)
		}
	}

	return mmTracer
}

// Inspect accepts an inspector function that has same arguments as the TracerProvider.Tracer
func (mmTracer *mOpentelemetryTracerProviderMockTracer) Inspect(f func(instrumentationName string, opts ...mm_trace.TracerOption)) *mOpentelemetryTracerProviderMockTracer {
	if mmTracer.mock.inspectFuncTracer != nil {
		mmTracer.mock.t.Fatalf("Inspect function is already set for OpentelemetryTracerProviderMock.Tracer")
	}

	mmTracer.mock.inspectFuncTracer = f

	return mmTracer
}

// Return sets up results that will be returned by TracerProvider.Tracer
func (mmTracer *mOpentelemetryTracerProviderMockTracer) Return(t1 mm_trace.Tracer) *OpentelemetryTracerProviderMock {
	if mmTracer.mock.funcTracer != nil {
		mmTracer.mock.t.Fatalf("OpentelemetryTracerProviderMock.Tracer mock is already set by Set")
	}

	if mmTracer.defaultExpectation == nil {
		mmTracer.defaultExpectation = &OpentelemetryTracerProviderMockTracerExpectation{mock: mmTracer.mock}
	}
	mmTracer.defaultExpectation.results = &OpentelemetryTracerProviderMockTracerResults{t1}
	return mmTracer.mock
}

// Set uses given function f to mock the TracerProvider.Tracer method
func (mmTracer *mOpentelemetryTracerProviderMockTracer) Set(f func(instrumentationName string, opts ...mm_trace.TracerOption) (t1 mm_trace.Tracer)) *OpentelemetryTracerProviderMock {
	if mmTracer.defaultExpectation != nil {
		mmTracer.mock.t.Fatalf("Default expectation is already set for the TracerProvider.Tracer method")
	}

	if len(mmTracer.expectations) > 0 {
		mmTracer.mock.t.Fatalf("Some expectations are already set for the TracerProvider.Tracer method")
	}

	mmTracer.mock.funcTracer = f
	return mmTracer.mock
}

// When sets expectation for the TracerProvider.Tracer which will trigger the result defined by the following
// Then helper
func (mmTracer *mOpentelemetryTracerProviderMockTracer) When(instrumentationName string, opts ...mm_trace.TracerOption) *OpentelemetryTracerProviderMockTracerExpectation {
	if mmTracer.mock.funcTracer != nil {
		mmTracer.mock.t.Fatalf("OpentelemetryTracerProviderMock.Tracer mock is already set by Set")
	}

	expectation := &OpentelemetryTracerProviderMockTracerExpectation{
		mock:   mmTracer.mock,
		params: &OpentelemetryTracerProviderMockTracerParams{instrumentationName, opts},
	}
	mmTracer.expectations = append(mmTracer.expectations, expectation)
	return expectation
}

// Then sets up TracerProvider.Tracer return parameters for the expectation previously defined by the When method
func (e *OpentelemetryTracerProviderMockTracerExpectation) Then(t1 mm_trace.Tracer) *OpentelemetryTracerProviderMock {
	e.results = &OpentelemetryTracerProviderMockTracerResults{t1}
	return e.mock
}

// Tracer implements trace.TracerProvider
func (mmTracer *OpentelemetryTracerProviderMock) Tracer(instrumentationName string, opts ...mm_trace.TracerOption) (t1 mm_trace.Tracer) {
	mm_atomic.AddUint64(&mmTracer.beforeTracerCounter, 1)
	defer mm_atomic.AddUint64(&mmTracer.afterTracerCounter, 1)

	if mmTracer.inspectFuncTracer != nil {
		mmTracer.inspectFuncTracer(instrumentationName, opts...)
	}

	mm_params := &OpentelemetryTracerProviderMockTracerParams{instrumentationName, opts}

	// Record call args
	mmTracer.TracerMock.mutex.Lock()
	mmTracer.TracerMock.callArgs = append(mmTracer.TracerMock.callArgs, mm_params)
	mmTracer.TracerMock.mutex.Unlock()

	for _, e := range mmTracer.TracerMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.t1
		}
	}

	if mmTracer.TracerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTracer.TracerMock.defaultExpectation.Counter, 1)
		mm_want := mmTracer.TracerMock.defaultExpectation.params
		mm_got := OpentelemetryTracerProviderMockTracerParams{instrumentationName, opts}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTracer.t.Errorf("OpentelemetryTracerProviderMock.Tracer got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTracer.TracerMock.defaultExpectation.results
		if mm_results == nil {
			mmTracer.t.Fatal("No results are set for the OpentelemetryTracerProviderMock.Tracer")
		}
		return (*mm_results).t1
	}
	if mmTracer.funcTracer != nil {
		return mmTracer.funcTracer(instrumentationName, opts...)
	}
	mmTracer.t.Fatalf("Unexpected call to OpentelemetryTracerProviderMock.Tracer. %v %v", instrumentationName, opts)
	return
}

// TracerAfterCounter returns a count of finished OpentelemetryTracerProviderMock.Tracer invocations
func (mmTracer *OpentelemetryTracerProviderMock) TracerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTracer.afterTracerCounter)
}

// TracerBeforeCounter returns a count of OpentelemetryTracerProviderMock.Tracer invocations
func (mmTracer *OpentelemetryTracerProviderMock) TracerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTracer.beforeTracerCounter)
}

// Calls returns a list of arguments used in each call to OpentelemetryTracerProviderMock.Tracer.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTracer *mOpentelemetryTracerProviderMockTracer) Calls() []*OpentelemetryTracerProviderMockTracerParams {
	mmTracer.mutex.RLock()

	argCopy := make([]*OpentelemetryTracerProviderMockTracerParams, len(mmTracer.callArgs))
	copy(argCopy, mmTracer.callArgs)

	mmTracer.mutex.RUnlock()

	return argCopy
}

// MinimockTracerDone returns true if the count of the Tracer invocations corresponds
// the number of defined expectations
func (m *OpentelemetryTracerProviderMock) MinimockTracerDone() bool {
	for _, e := range m.TracerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TracerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTracerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTracer != nil && mm_atomic.LoadUint64(&m.afterTracerCounter) < 1 {
		return false
	}
	return true
}

// MinimockTracerInspect logs each unmet expectation
func (m *OpentelemetryTracerProviderMock) MinimockTracerInspect() {
	for _, e := range m.TracerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OpentelemetryTracerProviderMock.Tracer with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TracerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTracerCounter) < 1 {
		if m.TracerMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OpentelemetryTracerProviderMock.Tracer")
		} else {
			m.t.Errorf("Expected call to OpentelemetryTracerProviderMock.Tracer with params: %#v", *m.TracerMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTracer != nil && mm_atomic.LoadUint64(&m.afterTracerCounter) < 1 {
		m.t.Error("Expected call to OpentelemetryTracerProviderMock.Tracer")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OpentelemetryTracerProviderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockTracerInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OpentelemetryTracerProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OpentelemetryTracerProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTracerDone()
}
