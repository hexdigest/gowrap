// Code generated by gowrap. DO NOT EDIT.
// template: ../templates/mock
// gowrap: http://github.com/hexdigest/gowrap

package templatestests

//go:generate gowrap gen -p github.com/hexdigest/gowrap/templates_tests -i TestInterface -t ../templates/mock -o interface_with_mock.go -l ""

import (
	"context"
	"sync"
)

// MockTestInterface implements TestInterface mock
type MockTestInterface struct {
	MockFuncChannels          func(chA chan bool, chB chan<- bool, chanC <-chan bool)
	MockFuncContextNoError    func(ctx context.Context, a1 string, a2 string)
	MockFuncF                 func(ctx context.Context, a1 string, a2 ...string) (result1 string, result2 string, err error)
	MockFuncNoError           func(s1 string) (s2 string)
	MockFuncNoParamsOrResults func()

	CalledMutex sync.Mutex // protects "NCalledMock..." counters

	NCalledMockChannels          int
	NCalledMockContextNoError    int
	NCalledMockF                 int
	NCalledMockNoError           int
	NCalledMockNoParamsOrResults int
}

// NewMockTestInterface is an mock implementation of the TestInterface
func NewMockTestInterface() *MockTestInterface {
	return &MockTestInterface{
		MockFuncChannels: func(chA chan bool, chB chan<- bool, chanC <-chan bool) {
			return
		},
		MockFuncContextNoError: func(ctx context.Context, a1 string, a2 string) {
			return
		},
		MockFuncF: func(ctx context.Context, a1 string, a2 ...string) (result1 string, result2 string, err error) {
			return
		},
		MockFuncNoError: func(s1 string) (s2 string) {
			return
		},
		MockFuncNoParamsOrResults: func() {
			return
		},
	}
}

// Channels mocks TestInterface.Channels
func (m *MockTestInterface) Channels(chA chan bool, chB chan<- bool, chanC <-chan bool) {
	m.CalledMutex.Lock()
	m.NCalledMockChannels++
	m.CalledMutex.Unlock()

	m.MockFuncChannels(chA, chB, chanC)
	return
}

// ContextNoError mocks TestInterface.ContextNoError
func (m *MockTestInterface) ContextNoError(ctx context.Context, a1 string, a2 string) {
	m.CalledMutex.Lock()
	m.NCalledMockContextNoError++
	m.CalledMutex.Unlock()

	m.MockFuncContextNoError(ctx, a1, a2)
	return
}

// F mocks TestInterface.F
func (m *MockTestInterface) F(ctx context.Context, a1 string, a2 ...string) (result1 string, result2 string, err error) {
	m.CalledMutex.Lock()
	m.NCalledMockF++
	m.CalledMutex.Unlock()

	return m.MockFuncF(ctx, a1, a2...)
}

// NoError mocks TestInterface.NoError
func (m *MockTestInterface) NoError(s1 string) (s2 string) {
	m.CalledMutex.Lock()
	m.NCalledMockNoError++
	m.CalledMutex.Unlock()

	return m.MockFuncNoError(s1)
}

// NoParamsOrResults mocks TestInterface.NoParamsOrResults
func (m *MockTestInterface) NoParamsOrResults() {
	m.CalledMutex.Lock()
	m.NCalledMockNoParamsOrResults++
	m.CalledMutex.Unlock()

	m.MockFuncNoParamsOrResults()
	return
}
