// Code generated by gowrap. DO NOT EDIT.
// template: ../templates/datadog_tracing
// gowrap: http://github.com/hexdigest/gowrap

package templatestests

//go:generate gowrap gen -p github.com/hexdigest/gowrap/templates_tests -i TestInterface -t ../templates/datadog_tracing -o interface_with_datadog_tracing.go -l ""

import (
	"context"

	"gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer"
)

// TestInterfaceWithDatadogTracing implements TestInterface interface instrumented with opentracing spans
type TestInterfaceWithDatadogTracing struct {
	TestInterface
	_instance      string
	_spanDecorator func(span tracer.Span, params, results map[string]interface{})
}

// NewTestInterfaceWithDatadogTracing returns TestInterfaceWithDatadogTracing
func NewTestInterfaceWithDatadogTracing(base TestInterface, instance string, spanDecorator ...func(span tracer.Span, params, results map[string]interface{})) TestInterfaceWithDatadogTracing {
	d := TestInterfaceWithDatadogTracing{
		TestInterface: base,
		_instance:     instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// ContextNoError implements TestInterface
func (_d TestInterfaceWithDatadogTracing) ContextNoError(ctx context.Context, a1 string, a2 string) {
	_span, ctx := tracer.StartSpanFromContext(ctx, _d._instance+".TestInterface.ContextNoError")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"a1":  a1,
				"a2":  a2}, map[string]interface{}{})
		}
		_span.Finish()

	}()
	_d.TestInterface.ContextNoError(ctx, a1, a2)
	return
}

// F implements TestInterface
func (_d TestInterfaceWithDatadogTracing) F(ctx context.Context, a1 string, a2 ...string) (result1 string, result2 string, err error) {
	_span, ctx := tracer.StartSpanFromContext(ctx, _d._instance+".TestInterface.F")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx": ctx,
				"a1":  a1,
				"a2":  a2}, map[string]interface{}{
				"result1": result1,
				"result2": result2,
				"err":     err})
		} else if err != nil {
			_span.Finish(tracer.WithError(err))
		}
	}()
	return _d.TestInterface.F(ctx, a1, a2...)
}
