// Code generated by gowrap. DO NOT EDIT.
// template: ../templates/caching
// gowrap: http://github.com/hexdigest/gowrap

package templatestests

//go:generate gowrap gen -p github.com/hexdigest/gowrap/templates_tests -i TestInterface -t ../templates/caching -o interface_with_caching.go -l ""

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/patrickmn/go-cache"
)

// TestInterfaceWithCaching implements TestInterface instrumented with caching
type TestInterfaceWithCaching struct {
	TestInterface
	_cache *cache.Cache
	_mutex sync.RWMutex
}

// NewTestInterfaceWithCaching creates a new instance with caching enabled
func NewTestInterfaceWithCaching(base TestInterface, defaultExpiration, cleanupInterval time.Duration) *TestInterfaceWithCaching {
	return &TestInterfaceWithCaching{
		TestInterface: base,
		_cache:        cache.New(defaultExpiration, cleanupInterval),
	}
}

// Channels implements TestInterface
func (_d *TestInterfaceWithCaching) Channels(chA chan bool, chB chan<- bool, chanC <-chan bool) {
	_d.TestInterface.Channels(chA, chB, chanC)
	return
}

// ContextNoError implements TestInterface
func (_d *TestInterfaceWithCaching) ContextNoError(ctx context.Context, a1 string, a2 string) {
	_d.TestInterface.ContextNoError(ctx, a1, a2)
	return
}

// F implements TestInterface
func (_d *TestInterfaceWithCaching) F(ctx context.Context, a1 string, a2 ...string) (result1 string, result2 string, err error) {
	_key := "F"
	_key += fmt.Sprintf(":%v", ctx)
	_key += fmt.Sprintf(":%v", a1)
	_key += fmt.Sprintf(":%v", a2)

	_d._mutex.RLock()
	if _cached, _found := _d._cache.Get(_key); _found {
		_d._mutex.RUnlock()
		_result := _cached.([]interface{})
		result1 = _result[0].(string)
		result2 = _result[1].(string)
		err = nil
		return
	}
	_d._mutex.RUnlock()

	result1, result2, err = _d.TestInterface.F(ctx, a1, a2...)

	if err == nil {
		_d._mutex.Lock()
		_d._cache.Set(_key, []interface{}{result1, result2, nil}, cache.DefaultExpiration)
		_d._mutex.Unlock()
	}

	return
}

// NoError implements TestInterface
func (_d *TestInterfaceWithCaching) NoError(s1 string) (s2 string) {
	_key := "NoError"
	_key += fmt.Sprintf(":%v", s1)

	_d._mutex.RLock()
	if _cached, _found := _d._cache.Get(_key); _found {
		_d._mutex.RUnlock()
		return _cached.(string)
	}
	_d._mutex.RUnlock()

	s2 = _d.TestInterface.NoError(s1)

	_d._mutex.Lock()
	_d._cache.Set(_key, s2, cache.DefaultExpiration)
	_d._mutex.Unlock()

	return
}

// NoParamsOrResults implements TestInterface
func (_d *TestInterfaceWithCaching) NoParamsOrResults() {
	_d.TestInterface.NoParamsOrResults()
	return
}
